---
title: "Complete Git and SSH Setup Guide: From Zero to Push"
description: |
  This guide provides step-by-step instructions to connect git, clone repo and push commits
categories: [Terminal, Programming]
date: "2025-05-07"
image: "thumbs/gitandssh.gif"
---

## What You'll Learn

Whether you're a beginner developer or switching to a new machine, setting up Git with SSH authentication can seem daunting. This comprehensive guide will walk you through every step to get you from a fresh installation to pushing your first commit securely.

By the end of this guide, you'll be able to:
- Configure Git with your identity
- Generate and set up SSH keys for secure authentication
- Create and manage local Git repositories
- Connect your local work to remote repositories (GitHub, GitLab, etc.)
- Understand the basic Git workflow for daily development

## Prerequisites

- A computer with terminal/command line access
- An account on a Git hosting service (GitHub, GitLab, Bitbucket, etc.)
- Basic familiarity with command line operations

---

## Step 1: Install and Configure Git

### Install Git

If you haven't already, download and install Git from the [official website](https://git-scm.com/downloads). Most Linux distributions and macOS come with Git pre-installed, but it's worth updating to the latest version.

**Check if Git is installed:**
```bash
git --version
```

### Configure Your Git Identity

This is crucial - Git needs to know who you are for commit attribution:

```bash
git config --global user.name "Your Full Name"
git config --global user.email "your.email@example.com"
```

**Pro tip:** Use the same email address associated with your GitHub/GitLab account for seamless integration.

**Verify your configuration:**
```bash
git config --global --list
```

### Optional: Set Your Default Editor

Configure your preferred text editor for commit messages:
```bash
# For VS Code
git config --global core.editor "code --wait"

# For nano (beginner-friendly)
git config --global core.editor "nano"

# For vim
git config --global core.editor "vim"
```

---

## Step 2: Set Up SSH Keys for Secure Authentication

SSH keys provide a secure way to authenticate with Git hosting services without entering your password every time.

### Generate Your SSH Key

Create a new SSH key pair using the modern Ed25519 algorithm:

```bash
ssh-keygen -t ed25519 -C "your.email@example.com"
```

**When prompted:**
- **File location:** Press Enter to accept the default (`~/.ssh/id_ed25519`)
- **Passphrase:** Optional but recommended for extra security

### Start the SSH Agent

The SSH agent manages your keys in memory:

```bash
eval "$(ssh-agent -s)"
```

You should see output like: `Agent pid 12345`

### Add Your Key to the SSH Agent

```bash
ssh-add ~/.ssh/id_ed25519
```

If you set a passphrase, you'll be prompted to enter it.

### Copy Your Public Key

Display and copy your public key:

```bash
cat ~/.ssh/id_ed25519.pub
```

Copy the entire output (starts with `ssh-ed25519` and ends with your email).

### Add Key to Your Git Hosting Service

#### For GitHub:
1. Go to **Settings** â†’ **SSH and GPG keys**
2. Click **New SSH key**
3. Give it a descriptive title (e.g., "My Laptop")
4. Paste your public key
5. Click **Add SSH key**

#### For GitLab:
1. Go to **Preferences** â†’ **SSH Keys**
2. Paste your public key in the **Key** field
3. Add a title and expiration date (optional)
4. Click **Add key**

### Test Your SSH Connection

Verify your setup works:

```bash
# For GitHub
ssh -T git@github.com

# For GitLab
ssh -T git@gitlab.com
```

You should see a welcome message confirming successful authentication.

---

## Step 3: Create Your First Local Repository

### Navigate to Your Project Directory

```bash
cd /path/to/your/project
# or create a new directory
mkdir my-awesome-project
cd my-awesome-project
```

### Initialize Git Repository

```bash
git init
```

This creates a hidden `.git` folder that tracks your project's history.

### Create Your First Files

If starting from scratch:
```bash
# Create a README file
echo "# My Awesome Project" > README.md

# Create a simple .gitignore
cat > .gitignore << EOF
# OS generated files
.DS_Store
Thumbs.db

# IDE files
.vscode/
.idea/

# Dependencies
node_modules/
EOF
```

### Stage and Commit Your Changes

```bash
# Stage all files
git add .

# Create your first commit
git commit -m "Initial commit: Add README and .gitignore"
```

**Good commit message practices:**
- Use present tense ("Add feature" not "Added feature")
- Keep the first line under 50 characters
- Be descriptive but concise

---

## Step 4: Connect to Remote Repository

### Create Remote Repository

1. Go to your Git hosting service (GitHub/GitLab)
2. Create a new repository
3. **Important:** Don't initialize with README, .gitignore, or license if you already have local commits

### Link Your Local Repository

```bash
git remote add origin git@github.com:yourusername/your-repo-name.git
# Replace with your actual username and repository name
```

### Check Your Default Branch

Modern Git uses `main` as the default branch, but older repos might use `master`:

```bash
git branch
```

If you're on `master` but want to use `main`:
```bash
git branch -M main
```

### Push Your Code

Push your local commits to the remote repository:

```bash
# First push (sets up tracking)
git push -u origin main

# Future pushes (after the -u flag is set)
git push
```

The `-u` flag (upstream) tells Git to remember this branch relationship, so future `git push` commands know where to go.

---

## Daily Git Workflow

Once everything is set up, your typical workflow will be:

```bash
# Make changes to your files
# ...

# Check what's changed
git status

# Stage changes
git add .
# or stage specific files
git add filename.txt

# Commit with a descriptive message
git commit -m "Add user authentication feature"

# Push to remote
git push
```

### Useful Git Commands

```bash
# View commit history
git log --oneline

# Check current status
git status

# See what changes you've made
git diff

# Undo changes to a file
git checkout -- filename.txt

# Pull latest changes from remote
git pull
```

---

## Troubleshooting Common Issues

### Permission Denied (SSH)
- Ensure your SSH key is added to ssh-agent: `ssh-add -l`
- Verify the key is added to your Git hosting service
- Test SSH connection: `ssh -T git@github.com`

### Remote Already Exists
If you get "remote origin already exists":
```bash
git remote remove origin
git remote add origin git@github.com:username/repo.git
```

### Wrong Branch Name
If your local branch doesn't match remote expectations:
```bash
# Rename current branch
git branch -M main
git push -u origin main
```

---

## Security Best Practices

1. **Use SSH keys** instead of passwords for authentication
2. **Set passphrases** on your SSH keys for additional security
3. **Regularly rotate** your SSH keys (annually recommended)
4. **Never commit sensitive data** like passwords or API keys
5. **Use .gitignore** to exclude sensitive files
6. **Review commits** before pushing to avoid accidentally including secrets

---

## Next Steps

Now that you have Git and SSH configured:

- Learn about **branching and merging** for collaborative development
- Explore **pull requests/merge requests** for code review workflows
- Set up **automated backups** of your repositories
- Consider using **Git hooks** for automated testing
- Learn about **conventional commits** for better commit messages

## Conclusion

Congratulations! You've successfully set up Git with SSH authentication and created your first repository. This foundation will serve you well throughout your development journey. Remember, Git is a powerful tool that becomes more valuable as you learn its advanced features, but these basics will handle 90% of your daily needs.

Happy coding! ðŸš€